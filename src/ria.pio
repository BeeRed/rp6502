/*
 * Copyright (c) 2022 Rumbledethumps
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

; Action sends a FIFO message for every write.
; It also sends a message for hard coded reads and one variable.
; Pushing new address to out FIFO changes variable read address.
.program ria_action


.wrap_target
pull_start:
pull noblock
start:
mov x osr
wait 1 gpio 21 [12] ; 12
mov osr pins
out y 1
jmp !y pull_start
out y 1
mov isr osr
jmp !y write
out y 8
out y 5
jmp !y write
jmp x!=y next
jmp write
next:
pull noblock
set x 0x0 ; TODO do we need more?
jmp x!=y start
mov x osr
write:
push noblock
.wrap


; Async ROM emulation but synced with PHI2.
.program ria_read

.wrap_target
out pins 8
mov isr y ; cortex base address
wait 0 gpio 21 [6]
in pins 5
.wrap


; This tries to sets pindirs exactly on PHI2 up transition
; but has to check again to accomodate slow glue logic.
; Doing both costs an extra 6 (of 32) PIO instructions.
.program ria_write
.side_set 1

nowrite:
nop             side 0 [5]
.wrap_target
mov osr !pins   side 0 ; reading is select==1 and write==1
out x 2         side 0
mov osr !isr    side 0
jmp !x reading1 side 0
jmp hiz1        side 1
reading1:
out pindirs 8   side 1
hiz1:
mov osr !pins   side 1 ; reading is select==1 and write==1
out x 2         side 1
jmp !x reading2 side 1
jmp hiz2        side 1 [8]
reading2:
mov osr !isr    side 1
out pindirs 8   side 1 [7]
hiz2:
mov osr isr     side 1
mov x pins      side 1
out pindirs 8   side 0
mov osr x       side 0 ; writing is select==1 and write==0
out x 2         side 0
jmp x-- jmpsub  side 0 ; subtract 1
jmpsub:
jmp x-- nowrite side 0
out x 8         side 0
mov isr y       side 0 ; cortex base address
in osr 5        side 0 ; bus address
push noblock    side 0
mov isr x       side 0 ; bus data
push noblock    side 0
.wrap
